<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sundeep's blog]]></title>
  <link href="http://sundeep.co.in/atom.xml" rel="self"/>
  <link href="http://sundeep.co.in/"/>
  <updated>2020-10-01T15:57:13+05:30</updated>
  <id>http://sundeep.co.in/</id>
  <author>
    <name><![CDATA[Sundeep Anand]]></name>
    <email><![CDATA[sundeep.co.in@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Choosing a Major Keyboard Layout Got Easier in Anaconda]]></title>
    <link href="http://sundeep.co.in/blog/2020/09/25/choosing-a-keyboard-layout-got-easier-in-anaconda/"/>
    <updated>2020-09-25T13:06:02+05:30</updated>
    <id>http://sundeep.co.in/blog/2020/09/25/choosing-a-keyboard-layout-got-easier-in-anaconda</id>
    <content type="html"><![CDATA[<p><a href="https://fedoraproject.org/wiki/Anaconda">Anaconda</a> is the default installer choice of linux distros like <a href="https://getfedora.org/">fedora</a>, <a href="https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux">Red Hat Enterprise Linux</a> and others. It allows the user to set languages, keyboards, time &amp; date, storage, networking, software packages and accounts. During installation, the target computer’s hardware is identified, configured and appropriate file systems are created.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-anand.github.io/blob/source/source/images/anaconda-keyboards/anaconda.png?raw=true" width="450" height="280"></p>

<!-- more -->


<p>Users can select keyboard layouts for their language (and script) using the Keyboard tab. They can choose from a menu of options. Locating desired layout in this long list could seem tedious. Moreover, it can be hard to search for the US layout when using the wrong default layout.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-anand.github.io/blob/source/source/images/anaconda-keyboards/anaconda-keyboard-layouts.png?raw=true" width="450" height="280"></p>

<p>An attempt was made to determine major keyboard layouts and place them first in the keyboard layouts selection list. Hence lesser scroll for the users.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-anand.github.io/blob/source/source/images/anaconda-keyboards/anaconda-keyboard-layouts-separator.png?raw=true" width="450" height="280"></p>

<p><a href="https://github.com/rhinstaller/anaconda/commit/429b4c1eec2b8d00654c7141bfb3fd580729f76e">anaconda-34.5-1</a> gracefully includes this proposal, making a significant improvement when selecting keyboards.</p>

<p>happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Your TV Smart With Rpi]]></title>
    <link href="http://sundeep.co.in/blog/2020/08/17/making-your-tv-smart-with-rpi/"/>
    <updated>2020-08-17T12:16:12+05:30</updated>
    <id>http://sundeep.co.in/blog/2020/08/17/making-your-tv-smart-with-rpi</id>
    <content type="html"><![CDATA[<p><a href="https://www.raspberrypi.org/">Raspberry Pi</a> has gained popularity in a very less time for obvious reasons. Let&rsquo;s take a look how we can turn our TVs smart with the tiny yet powerful board. Quickly check you have following:</p>

<ul>
<li>Raspberry Pi board</li>
<li>Power cable (Micro USB/USB Type-C)</li>
<li>SD Card (min 8 GB)</li>
<li>Ethernet cable</li>
<li>Keyboard, Mouse</li>
<li>HDMI Cable, TV or Monitor</li>
</ul>


<p>Get your laptop. Hit the <a href="https://www.raspberrypi.org/downloads/">downloads</a> page! Make <code>Raspberry Pi Imager</code> work on your system. Basically we will be exploring <a href="https://kodi.tv/">kodi</a>, however, lets use <a href="https://osmc.tv/">OSMC</a> which wraps it inside! Download OSMC image respective to the board you&rsquo;re using from <a href="https://osmc.tv/download/">Disk Images</a>. Now, burn that onto your SD Card using the Raspberry Pi Imager. Plug SD card and other peripherals to your board as well as turn the power on. Here is your OS preparing &hellip;</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/kodi/osmc-boot.jpg?raw=true" width="450" height="280"></p>

<!-- more -->


<p>OSMC (<em>open source media center</em>) is debian based OS, hence all <code>apt</code> here!<br/>With small settings check/enable <code>ssh</code> and try <a href="https://osmc.tv/wiki/general/accessing-the-command-line/">connecting</a>. Look at sources in <code>/etc/apt/sources.list.d/</code>. The UI must have astonished you by now.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/kodi/osmc-menu.jpeg?raw=true" width="450" height="280"></p>

<p>I&rsquo;m sure, you cannot wait to configure <code>YouTube</code> and/or <code>Amazon Prime</code> in your setup. Let&rsquo;s roll. <code>YouTube</code> video add-on is available in <em>Kodi Add-on repository</em> so, its just adding/enabling that from navigating to <code>Home &gt; Add-ons &gt; Install from repository &gt; Video Add-ons</code>.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/kodi/youtube-install.png?raw=true" width="450" height="280"></p>

<p>Though you&rsquo;ve enabled YouTube; you may encounter an error <code>accessNotConfigured</code>. However, the fix is simple. Navigate to <a href="https://console.developers.google.com/">Google&rsquo;s Developers Console</a> and register a new youtube project for generating <code>API Key</code>, <code>API ID</code> and <code>API Secret</code>. Fill them. Now, it should be working.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/kodi/youtube-api.png?raw=true" width="450" height="280"></p>

<p>For Netflix and Amazon Prime, get onto your <code>ssh console</code> and follow this amazing <a href="https://makingstuffwork.net/technology/install-netflix-amazon-prime-video-plex-raspberry-pi-kodi-osmc/">blog post</a>. Source repo is <a href="https://github.com/Sandmann79/xbmc">here</a>. ARMv6 processors may not support these formats because of <a href="https://github.com/emilsvennesson/script.module.inputstreamhelper/issues/23">libwidevine</a>. Enjoy your add-ons a bit. It has a plenty of options across <code>programs</code>, <code>music</code>, <code>pictures</code> and <code>vidoes</code>. Enable a few more to test the performance!</p>

<p>Next is to get rid of keyboard/mouse. Look none other than <a href="https://yatse.tv/">Yatse</a>. That&rsquo;s awesome. Just <a href="https://play.google.com/store/apps/details?id=org.leetzone.android.yatsewidgetfree&amp;hl=en_IN">play</a> it on your mobile device. Remember to keep both your mobile and Raspberry Pi on the same network. <code>Yatse</code> will discover your kodi automatically to let you interact seamlessly.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/kodi/yaste.png?raw=true" width="450" height="280"></p>

<p><a href="https://github.com/xbmc">Kodi</a> is a great community with awesome people.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Langpacks Auto-installation]]></title>
    <link href="http://sundeep.co.in/blog/2019/07/31/langpacks-autoinstall/"/>
    <updated>2019-07-31T17:00:21+05:30</updated>
    <id>http://sundeep.co.in/blog/2019/07/31/langpacks-autoinstall</id>
    <content type="html"><![CDATA[<p>Fedora Linux Operating System has strong language support. Underneath, there are a lot of components that facilitate <code>display</code>, <code>input</code> and <code>storage</code> of language specific data. Users can install Fedora in their native language and continue using it, or they can easily switch their workstation from one language to another. For the latter case, the steps are:</p>

<ul>
<li>Open “GNOME Control Center”</li>
<li>Select “Region &amp; Language” tab.</li>
<li>Select language from modal box and logoff-login the session.</li>
</ul>


<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/autoinstall-langpacks/switch-lang.png?raw=true" width="450" height="280"></p>

<!-- more -->


<p>Here, the user has selected Japanese language. As soon as the user logs into the new session, Japanese <code>locale data</code> would be triggered and applications would appear in Japanese.  Language data available in langpacks (<em>language packs</em>) include fonts, input methods, translations etc.</p>

<p>To make installation of langpacks convenient, <code>langpack meta packages</code> have been created. Once a meta package is installed, the required langpacks for installed applications are downloaded and installed too. For Japanese, the installation command would be:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[localhost] $ sudo dnf install langpacks-ja</span></code></pre></td></tr></table></div></figure>


<p>Earlier, this installation was a manual step. After long discussion, <code>GNOME-Software</code> was identified to be an ideal setup to have langpacks auto-installation functionality.</p>

<p>Now, with the <a href="https://gitlab.gnome.org/GNOME/gnome-software/merge_requests/257">implementation</a>, users need not worry about installation of langpacks as it gets installed automatically in the background as soon as GNOME-Software starts looking for updates the first time a user logs into the desktop in that language.</p>

<p>Because this is a <code>background task</code>, no notifications are popped, however here is how a debug message is logged.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/autoinstall-langpacks/langpacks-ja.png?raw=true" width="450" height="280"></p>

<p>If the user uninstalls the language meta package, this feature will not automatically reinstall it. Users can still reinstall the meta package manually if they wish to use it again.</p>

<p>I really hope this feature to be available in Fedora 31. And make the lives of Fedora native language users easier. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FOSSASIA 2019]]></title>
    <link href="http://sundeep.co.in/blog/2019/03/16/fossasia-2019/"/>
    <updated>2019-03-16T13:26:08+05:30</updated>
    <id>http://sundeep.co.in/blog/2019/03/16/fossasia-2019</id>
    <content type="html"><![CDATA[<p>March 14, 2019 - the new warm day - when FOSSASIA turns 10! Floks, celebrating the eve with great enthusiasm and passion at the same venue that of last year, <a href="https://www.lli.sg/">LifeLong Learning Institute Singapore</a>. People queued up at the registration desk this morning waiting to collect their badges.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2019/image1.jpeg?raw=true" width="450" height="280"></p>

<!-- more -->


<p>The summit opened up with a series of keynotes. First one featured <code>Dr Koh Tat Suan</code> (<em>Director Lifelong Learning Institute</em>) who talked about contribution of FOSSASIA and SkillsFuture among Singaporeans. Moreover, he described functions of LLI.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2019/image2.jpeg?raw=true" width="450" height="280"></p>

<p>Followed by second keynote: <code>Harish Pillay</code>’s (<em>Head Community Leadership, Red Hat</em>) talk on 10 years and back to the future! He explained, very interestingly, how a new generation of technologists and developers is growing up and participating in the community. What are the challenges today and how do we connect them to the previous generations of FOSS developers?</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2019/image3.jpeg?raw=true" width="450" height="280"></p>

<p>Then, <code>Hong Phuc</code> (<em>Founder FOSSASIA</em>) welcomed everyone at FOSSASIA and threw lights on every year’s FOSSASIA’s memories. She recapped the journey of 10 years and mentioned what is coming next?</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2019/image4.jpeg?raw=true" width="450" height="280"></p>

<p><code>Mario Behling</code> (<em>CEO of OpnTec</em>) talked about State of Open Tech. He went on describing various open source projects going on in various parts across Asia. And how these projects changing lives to create new possibilities.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2019/image5.jpeg?raw=true" width="450" height="280"></p>

<p>Next keynote was: The Open Source Industrial AI Capabilities with IBM by <code>Rahul Akolkar</code> (<em>Worldwide Technical Sales Leader</em>). He touched upon various products and offerings, what IBM has brought together a set of industrial AI capabilities and tools that provide a robust open AI platform for the enterprise. Furthermore, he covered many hybrid and multi-cloud hybrid and multi-cloud architectures.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2019/image6.jpeg?raw=true" width="450" height="280"></p>

<p>In the afternoon, various tracks opened up with a variety of talks. One of them, I participated was Serverless with knative by <code>Mete Atamel</code> (<em>Developer Advocate Google</em>). He explained how Knative extends Kubernetes to provide a set of middleware components (build, serving, events) for modern, source-centric, and container-based apps that can run anywhere.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2019/image7.jpeg?raw=true" width="450" height="280"></p>

<p>Next day, kernel and platform track caught my attention. One of the talks was on BuildStream - The all purpose build and integration tool by <code>Tristan Van Berkom</code> (<em>Lead Software Engineer Codethink</em>). He briefly explained the problems which revolve around the software build space from the perspective of the developer and the perspective of the system integrator. Furthermore, he introduced the BuildStream project; which is now used to build the base Flatpak runtimes and GNOME releases.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2019/image8.jpeg?raw=true" width="450" height="280"></p>

<p>This year I presented Transtats as a tool to ensure package translation completeness. Touched upon internationalization frameworks and described package localization cycle in detail. <a href="https://www.youtube.com/watch?v=RHPtsIHNIgg">Demo</a> was good. <a href="https://speakerdeck.com/sundeep/using-transtats-to-ensure-package-translation-completeness">Here</a> are the slides. Project website is <a href="http://transtats.org/">transtats.org</a></p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2019/image9.jpeg?raw=true" width="450" height="280"></p>

<p>From long time, but just wanted to learn deploying apps using Kubernetes. I got this chance in a workshop on Fundamentals of deploying applications to Kubernetes by <code>Graham Dumpleton</code> (<em>Developer Evangelist Red Hat</em>) and <code>Jorge Morales</code> (<em>Developer Advocate Red Hat</em>). The workshop covered many topics like What are containers and pods, Accessing pods for an application via a service, Scaling up applications to many instances, Automatic recovery from application failure, Exposing a web application to the public, Application lifecycle management and Monitoring health of an application. They provided really easy-to-follow workshop environment.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2019/image10.jpeg?raw=true" width="450" height="280"></p>

<p>Around Google Big Query, this year we had a talk on Protecting sensitive data in huge datasets: Cloud tools you can use by <code>Felipe Hoffa</code> (<em>Developer Advocate Google</em>). He was amazing! He explained how to handle massive public datasets, from theory to real life showcasing newly available tools that help with PII detection and brings concepts like k-anonymity and l-diversity.</p>

<p>Third day at FOSSASIA, however, things were as fresh as of the first. I mostly participated in CyberSecurity talks and enjoyed them. Due to some last minute changes in my return flight schedule I had to leave early and hence here my FOSSASIA Summit 2019 journey concluded. It’s always great to be a part of such an event. Many thanks to organizers and sponsors. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transtats - Getting Started]]></title>
    <link href="http://sundeep.co.in/blog/2019/02/06/transtats-getting-started/"/>
    <updated>2019-02-06T11:49:23+05:30</updated>
    <id>http://sundeep.co.in/blog/2019/02/06/transtats-getting-started</id>
    <content type="html"><![CDATA[<p>Helps in tracking translation completeness of your packages. These packages may participate in product releases, so a few Transtats UI group statistics to create at-a-glance translation progress picture - <em>for the release</em>! It has tools to detect translation deficiency in ready-to-ship packages.</p>

<h2>Getting Started</h2>

<p>Transtats Fedora instance is running at <a href="https://transtats.fedoraproject.org">https://transtats.fedoraproject.org</a><br/>And <code>fedora-30</code> release is already added.</p>

<!--more-->


<h5>First step is to add your package in Transtats.</h5>

<ul>
<li>Click on <code>Fedora Login</code> button and login into the system using your Fedora Credentials.</li>
</ul>


<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/ts-get-started/1-fedora-login.png?raw=true?raw=true" width="350" height="180"></p>

<ul>
<li>After logged-in, click on <code>Packages</code> link. (<em>This will take you to packages list page</em>)</li>
</ul>


<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/ts-get-started/2-packages-link.png?raw=true?raw=true" width="350" height="180"></p>

<ul>
<li>Click on <code>Add Package</code> button to add your package in Transtats.</li>
</ul>


<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/ts-get-started/3-add-package.png?raw=true?raw=true" width="350" height="180"></p>

<ul>
<li>Enter <code>Package Name</code> and <code>Upstream URL</code>. Select <code>Translation Platform</code> and check <code>Fedora</code>.</li>
</ul>


<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/ts-get-started/4-package-form.png?raw=true?raw=true" width="520" height="400"></p>

<ul>
<li>Finally, click on <code>Add Package</code> button to validate and register the package with Transtats.</li>
<li>Go back to list packages page and locate newly added package. Click on package name.

<ul>
<li>This will take you to the package details page. (<em>Use dropdown to navigate between packages</em>)</li>
</ul>
</li>
</ul>


<h5>Secondly, sync your package with Translation Platform, Build System and Upstream.</h5>

<ul>
<li>Sync the package with <code>Translation Platform</code>; this will generate <code>Branch Mapping</code> also.</li>
</ul>


<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/ts-get-started/5-sync-platform.png?raw=true?raw=true" width="420" height="280"></p>

<ul>
<li>Once branch mapping is created, sync the package with <code>Koji</code> build system.</li>
</ul>


<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/ts-get-started/6-sync-buildsys.png?raw=true?raw=true" width="420" height="280"></p>

<ul>
<li> This will take you to the syncdownstream YML job; uncheck <em>Dry Run</em> and run the job!</li>
</ul>


<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/ts-get-started/7-job-run.png?raw=true?raw=true" width="520" height="400"></p>

<ul>
<li>Go back to package&rsquo;s detail page and locate statistics from <code>koji</code> build system.</li>
</ul>


<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/ts-get-started/8-locate-stats.png?raw=true?raw=true" width="420" height="280"></p>

<ul>
<li>Click on <code>Statistics Diff</code> to update diff and know - which languages need attention.

<ul>
<li>This is based on branch mapping generated of the respective package.</li>
</ul>
</li>
</ul>


<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/ts-get-started/9-stats-diff.png?raw=true?raw=true" width="420" height="280"></p>

<ul>
<li> This will indicate languages in which the package is out of sync.</li>
</ul>


<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/ts-get-started/10-out-of-sync.png?raw=true?raw=true" width="420" height="280"></p>

<h5>Finally, update releases and packages summary.</h5>

<ul>
<li>Go to <code>Dashboard</code> (<em>landing page</em>) and click to refresh summary.</li>
</ul>


<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/ts-get-started/11-release-summary.png?raw=true?raw=true" width="520" height="400"></p>

<ul>
<li>Similary for packages - click on <code>Packages - Translation Completeness</code> tab and refresh summary.</li>
</ul>


<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/ts-get-started/12-package-summary.png?raw=true?raw=true" width="520" height="400"></p>

<h2>Limitations</h2>

<p>As of now following are the limitations (<em>shall be eliminated in coming Transtats releases</em>):</p>

<ul>
<li>Packages could not auto sync (with Platform, Build System etc.) and need manual effort.</li>
<li>Branch mapping and Statistics Diff need to be updated manually for each package.</li>
<li>Releases and Packages summary also need manual effort to get updated.</li>
</ul>


<h4>Sync Order</h4>

<ol>
<li>Sync package with Translation Platform, Build System and Upstream.</li>
<li>Update Statistics Diff and then, Releases &amp; Packages Summaries.</li>
</ol>


<h4>Jobs</h4>

<p>While running job uncheck <code>Dry Run</code> only when the package is added in Transtats - to save stats.
<code>Sync Package Build System</code> job can be dry run for any package and any build tag (<em>including rawhide</em>).</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/ts-get-started/13-yml-job.png?raw=true?raw=true" width="420" height="280"></p>

<ul>
<li>Job log URL will be generated for dry runs too, and can be shared.</li>
</ul>


<h2>More resources</h2>

<ul>
<li><a href="https://transtats.fedoraproject.org/quick-start">https://transtats.fedoraproject.org/quick-start</a></li>
<li><a href="http://docs.transtats.org/en/latest/">http://docs.transtats.org/en/latest/</a></li>
</ul>


<h2>Issues</h2>

<ul>
<li>Please report issues / feature ideas here: <a href="https://github.com/transtats/transtats/issues/new">https://github.com/transtats/transtats/issues/new</a></li>
<li>Join <code>#transtats</code> channel in IRC freenode. Or, drop queries at <code>#fedora-g11n</code> channel.</li>
</ul>


<h2>References</h2>

<ul>
<li><a href="https://speakerdeck.com/sundeep/using-transtats-to-track-translation-string-change">https://speakerdeck.com/sundeep/using-transtats-to-track-translation-string-change</a></li>
<li><a href="https://www.youtube.com/watch?v=8q9cg-wsrUg">https://www.youtube.com/watch?v=8q9cg-wsrUg</a></li>
</ul>


<p>Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flock 2018]]></title>
    <link href="http://sundeep.co.in/blog/2018/08/20/flock-2018/"/>
    <updated>2018-08-20T14:46:46+05:30</updated>
    <id>http://sundeep.co.in/blog/2018/08/20/flock-2018</id>
    <content type="html"><![CDATA[<p>After the US, I was really excited to visit Europe this time for fedora flock conference. A lot of preparation: air tickets, stay, documents for VISA and more. Unfortunately we got our VISA declined and everything hanged. We re-applied and got it approved in second time that to just two days before to the planned take off. Nevertheless did all of slides/demo, shopping &amp; packing and was ready for cab pickup. This time Pune to Mumbai was really relaxing and we reached <a href="https://csia.in/">Mumbai Airport</a> before time! With some flight delay, reached <a href="https://www.frankfurt-airport.com/en.html">Frankfurt Airport</a> <em>landing was really smooth</em>. By evening we reached the beautiful city - <a href="https://www.dresden-airport.de/">Dresden</a>. Venue for the conference this year was - The Radisson Blu Park Hotel &amp; Conference Centre at Radebeul.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2018/dresden-hotel.jpg?raw=true" width="450" height="280"></p>

<!--more-->


<p>The conference started with warm welcome by <code>Brian Exelbierd</code> and keynote by <code>Matthew Miller</code>. He took us on states of fedora. How fedora performed last year and how was the last year in comparison to last few years. Community involvement and usage, statistics graphs. Further discussions were around fedora modularity, rings, coreOS, atomic host etc.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2018/keynote.jpg?raw=true" width="450" height="280"></p>

<p><code>Dusty Maybe</code> discussed cri-o, kubernetes, container runtimes, podman, builddah and app-containers. <code>Matthias Clasen</code> from desktop team joined and discussed various aspects of the new <a href="https://teamsilverblue.org/">silverblue</a> project. Fedora Silverblue uses rpm-ostree and Flatpaks to create an image-based &ldquo;git-like&rdquo; operating system with easy rollbacks and workflows.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2018/silverblue.jpg?raw=true" width="450" height="280"></p>

<p>Post lunch, we had a talk on &ldquo;Advanced Ansible: Extending with Plugins&rdquo; by <code>Adam Miller</code>. Ansible is a radically simple IT agentless automation system. It handles configuration-management, application deployment, cloud provisioning, ad-hoc task-execution, and multinode orchestration - including trivializing things like zero-downtime rolling updates with load balancers. He discussed how to extend Ansible core functionalities with Plugins which can be a catalyst in solving problems.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2018/ansible.jpg?raw=true" width="450" height="280"></p>

<p>Next morning, was my talk after <code>Amitosh Swain Mahapatra</code>&rsquo;s State of SELinux in fedora desktop, modularity and containers. My topic was &ldquo;Using Transtats to track translation string change&rdquo;. <code>Parag Nemade</code> joined me to deliver the talk. I introduced Transtats Jobs. Here are the <a href="https://speakerdeck.com/sundeep/using-transtats-to-track-translation-string-change">slides</a> and <a href="https://www.youtube.com/watch?v=D1sHpxfxrk4">demo</a>. Transtats Jobs are flexible, YML based, which can solve many problems in i18n/l10n space! As-in tracking string change, inspecting SRPM for i18n/translation errors etc.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2018/talk.jpg?raw=true" width="450" height="280"></p>

<p>Post lunch on Day 2, we attended &ldquo;Modularity Release Train&rdquo; by <code>Stephen Gallagher</code> and <code>Mohan Boddu</code>. Followed by building &ldquo;Fedora CoreOS&rdquo; by <code>Dusty Maybe</code>. In the evening we head to the Dresden city center, to explore and sightseeing - Zwinger, Church, Opera House and Castle.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2018/city-center.jpg?raw=true" width="450" height="280"></p>

<p>Next morning, of flock day 3, started with the session by <code>Owen Taylor</code> on &ldquo;Building flatpaks from fedora packages&rdquo;. Had joined <code>Adam Miller</code>&rsquo;s session on &ldquo;Jumpstart your fedora contribution by learning Ansible&rdquo;. He touched upon using <em>ansible-test</em> module. Post lunch, we had our hackathon on &ldquo;i18n development and testing&rdquo;. <code>Pooja</code> and <code>Pravin</code> discussed i18n test automation using openQA and some plans to integrate test cases with fedora CI. This evening flock had dinner plans at the great <a href="http://www.rollercoasterrestaurant.com/en/">Rollercoaster</a> restaurant. An amazing experience!</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2018/roller-coster.jpg?raw=true" width="450" height="280"></p>

<p>The last day - day 4 - flock 2018. I was really interested in talks from fedora infrastructure team. First session was about migrating apps to new fedmsg architecture &ldquo;fedora messaging&rdquo; by <code>Aurelien Bompard</code> and <code>Jeremy Cline</code>. Its Python ZeroMQ libraries underline. <em>fedmsg-migration-tools</em> are really helpful here! Then we had a talk on &ldquo;How fedora infrastructure is using OpenShift to mode 2 shift&rdquo; by <code>Randy Barlow</code> and <code>Patrick Uiterwijk</code>. They use Ansible playbooks to push object definitions to OpenShift. And thus we came to the wrap up of flock twenty eighteen. Everyone gathered in the main hall for conclusion by fedora council members!</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2018/leaving.jpg?raw=true" width="450" height="280"></p>

<p>Each fedora flock conference is unique, which helps the vibrant community meet and greet!!  With some hopes and plans for next year, boarded flight back to home.</p>

<p>thanks fedora :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FOSSASIA 2018]]></title>
    <link href="http://sundeep.co.in/blog/2018/03/31/fossasia-2018/"/>
    <updated>2018-03-31T16:58:50+05:30</updated>
    <id>http://sundeep.co.in/blog/2018/03/31/fossasia-2018</id>
    <content type="html"><![CDATA[<p>After March 2016, this year I get chance to come back to this beautiful city - <a href="https://en.wikipedia.org/wiki/Singapore">Singapore</a> !! The country continues to hold best rankings in commerce, finance, transport &amp; technology.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2018/singapore-city-1.jpg?raw=true" width="450" height="280"></p>

<p>The premier open source summit <a href="https://2018.fossasia.org/">FOSSASIA</a> held on 22nd March to 25th March. This year <code>Life Long Learning Institute</code> hosted the event. <a href="https://www.lli.sg/">LLI</a> is located at Paya Lebar and serves gateway to learning opportunities since long time. It is very nearby to MRT and in the heart of city.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2018/lli-singapore.jpg?raw=true" width="450" height="280"></p>

<!--more-->


<p>Opening of FOSSASIA 2018 was really warm and welcoming. People across the world makes it really special for all of us, to gather and share experiences. <code>Harish Pillay</code> (Head Community Leadership, Red Hat) and <code>Damini Satya</code> (SE - Salesforce) started the summit with an schedule overview and free &amp; open source background, advancements across Asia Pacific.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2018/fossasia18-1.jpg?raw=true" width="450" height="280"></p>

<p>Special guest <code>Teo Ser Luck</code> (Member of Parliament) gave an overview on Open Technology in Singapore Govt. How they work with open source software to bring several developments and automation. This was a quick deep dive into on-going projects and, really inspiring.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2018/fossasia18-2.jpg?raw=true" width="450" height="280"></p>

<p>Then come keynotes. Started by <code>Jonas von Malottki</code> (Senior Manager Daimler). He shared how Daimler uses Free and Open Source software within several of its products. Daimler is the first German automaker that joined the development of Automotive Grade Linux to help build the next generation connected car platform. This was very interesting to learn!</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2018/fossasia18-3.jpg?raw=true" width="450" height="280"></p>

<p>Followed by this, we had the keynote from FOSSASIA founder <code>Hong Phuc Dang</code>. She talked about how FOSSASIA scaled up and what are the future plans. Also, how FOSSASIA collaborates and develops open source solutions for Event Management, AI, Big Data and others.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2018/fossasia18-4.jpg?raw=true" width="450" height="280"></p>

<p>Next morning, we had talks started for the summit. There were multiple tracks: Artificial Intelligence, Blockchain, Open Design, IoT, Hardware, Imaging, Cloud, Container, DevOps, Kernel &amp; Platform, Open Data, Internet Society, Community. So, really an awesome job by organisers. I started the day with the talk by <code>Chris Aniszczyk</code> (CTO Cloud Native Computing Foundation). He spoke on &lsquo;Rise of Kubernetes and the Cloud Native Computing Foundation&rsquo;.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2018/fossasia18-5.jpg?raw=true" width="450" height="280"></p>

<p>I remained in lecture theatre as talks were so cool and technical. &lsquo;Working with Cloud Dataprep&rsquo;, &lsquo;What can we learn from 1.1 billion GitHub events and 42 TB of code?&rsquo;, &lsquo;CloudML Engine: Qwik Start&rsquo; all by Google Advocates made my day. Learnt a lot, these cleared many of my concepts.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2018/fossasia18-6.jpg?raw=true" width="450" height="280"></p>

<p>On Sunday, I jumped on security track and joined &lsquo;BlueBorne: Beware of Bluetooth!&rsquo; talk by <code>Huzaifa Sidhpurwala</code> (Principal Software Engineer, Red Hat). He described a security flaw affecting bluetooth stacks of Linux, Android, iOS and Windows. The impact was evident by the fact that the attacker did not even need to be paired to the victims device in order to exploit it.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2018/fossasia18-7.jpg?raw=true" width="450" height="280"></p>

<p>From Open Data &amp; Community track, I attended <code>Brian Proffitt</code> (Principal Program Manager, Red Hat) talk. Where he shared his thoughts and experiences on &lsquo;How to measure a community&rsquo;s health&rsquo;. How to use metrics more regularly to measure the health and activity levels of projects and their attendant communities. How to figure out what we need from the data.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2018/fossasia18-8.jpg?raw=true" width="450" height="280"></p>

<p>In-between I tried listening a few talks from Cloud / Container / DevOps track. &lsquo;Running OpenStack in Containers&rsquo; and &lsquo;Delivering a bleeding edge community-led openstack distribution: RDO&rsquo; were really informative. Then came talks by <code>Chris Van Tuin</code> (Chief Technologist, Red Hat). He described Microservices, Containers and Kubernetes. How they are connected in DevOps success. He also touched upon continuous security with kubernetes.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2018/fossasia18-9.jpg?raw=true" width="450" height="280"></p>

<p>Here comes my talk. I try introducing <code>Transtats</code> project and thank <a href="https://engineers.sg/">engineers.sg</a> for recording the <a href="https://engineers.sg/video/introduction-to-transtats-sundeep-anand-fossasia-2018--2457">session</a>. Then we had an interesting talk &lsquo;The Four Temperaments of human beings&rsquo; by <code>Jens Petersen</code> (Engineering Manager, Red Hat) who explained the four classical temperaments: Melancholic, Phlegmatic, Sanguine and Choleric. Also their unique qualities, strengths, etc.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/fossasia2018/fossasia18-10.jpg?raw=true" width="450" height="280"></p>

<p>With this FOSSASIA Summit 2018, came closure to get concluded. Its great to be a part of such an event to feel, experience and learn open source!! together :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I18n FAD]]></title>
    <link href="http://sundeep.co.in/blog/2017/11/28/i18n-fad/"/>
    <updated>2017-11-28T14:22:51+05:30</updated>
    <id>http://sundeep.co.in/blog/2017/11/28/i18n-fad</id>
    <content type="html"><![CDATA[<p>This time <a href="https://en.wikipedia.org/wiki/Pune">Pune, India</a> was selected for <a href="https://fedoraproject.org/wiki/FAD_I18N_2017">Fedora Activity Day</a> 2017 of Internationalization (i18n) Engineering. Folks from all over APAC and EMEA joined together to exchange ideas, fix long pending bugs and hack on new ideas. Thanks to Fedora Council for approving budget and to <a href="https://fedoraproject.org/wiki/User:Bex">Bex</a> for coordinating &amp; moving i18n FAD arrangements further! <a href="https://fedoraproject.org/wiki/User:Petersen">Jens</a>, <a href="https://fedoraproject.org/wiki/User:Pnemade">Parag</a> and <a href="https://fedoraproject.org/wiki/User:Pravins">Pravin</a> played vital roles in organising everything required to make it happen.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/i18nfad17/FAD_0.JPG?raw=true" width="450" height="280"></p>

<p>I was really excited to meet my entire team for the first time! And it was Sunday evening, 19th Nov 2017 we all met together and went <a href="http://www.amanoramall.com/">Amanora</a> Food Court to share evening moments over snacks.</p>

<!--more-->


<h3>Day 1st, Talks</h3>

<p>Everyone was busy finishing their slides and demo as projector/screen was waiting to show some really cool i18n stuffs.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/i18nfad17/FAD_1.JPG?raw=true" width="450" height="280"></p>

<p><code>Pravin</code> started the day with welcome greetings and reminded on earlier <a href="https://fedoraproject.org/wiki/FAD_G11N_2015">g11n FAD</a>. After quick logistics by <code>Parag</code> everyone queued up for their introductions. <code>Jens-Ulrik Petersen</code> covered i18n FAD intro and took us on evolution of Fedora i18n.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/i18nfad17/FAD_2.JPG?raw=true" width="450" height="280"></p>

<p><code>Akira Tagoh</code> started the session with highlights on fonts development. He discussed some really interesting topics like fontconfig cache, flatpack support and font-tweak-tool. <code>Peng Wu</code> took over to catch up on Pango development plans: Unicode 10 support and bidirectional algorithm. After a quick Tea break, we continued with sessions on Input Methods. <code>Takao Fujiwara</code> shared ibus 1.6 plans: API deprecation, Extending ibus compose tests to other engines, etc. He demo'ed anthy test triggered by focus event and emoji input. <code>Peng Wu</code> seemed interested in fixing Qt5 ForwardKeyEvent issue. <code>Mike Fabian</code> explained and demo'ed ibus-typing-booster and emoji-picker.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/i18nfad17/FAD_3.JPG?raw=true" width="450" height="280"></p>

<p>And then talks turned towards Locales. <code>Mike Fabian</code> explained about Latvian collation: CLDR vs glibc. <code>Rafal Luzynski</code> brought focus on dates rendered wrong in desktop UI (gnome etc) for many languages. Further, he explained genitive &amp; nominative cases and mentioned one long pending <a href="https://sourceware.org/bugzilla/show_bug.cgi?id=18666">bug</a>.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/i18nfad17/FAD_4.JPG?raw=true" width="450" height="280"></p>

<p>After lunch, I started with Transtats. Here are my <a href="https://speakerdeck.com/sundeep/transtats">slides</a>. <code>Parag</code> joined the discussion for CLI demo and <code>Sachin</code> demo'ed Automation Testing. After this, <code>Pravin</code> touched upon i18n test automation and covered fonts testing and UTTRS. <code>Pooja</code> joined and explained about input method test automation. In the next session we had discussions around Fedora Test Cases. <code>Satya</code> and <code>Sandeep</code> quickly recap Fedora 27 test days and explain about some gap analysis including Wayland, new ibus version and Flatpak. <code>Bhushan</code> talked about input tests, rendering and DRTC. <code>Vishal</code> demo'ed tool for web scraping and shared plans for Kimchi web client for kvm. And with this we concluded sessions.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/i18nfad17/FAD_5.JPG?raw=true" width="450" height="280"></p>

<p>Quickly everyone wrote down the projects/parts they are interested in to collaborate and hack on. In the evening we had a quick walk, followed by a team dinner at <a href="http://www.magarhospitality.com/deccanharvest/">Deccan Harvest</a>.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/i18nfad17/FAD_6.JPG?raw=true" width="450" height="280"></p>

<h3>Day 2nd and 3rd, Hacking</h3>

<p>A couple of days of collaboration and demo&rsquo;s. People join their hands on several objectives: Fonts testing automation, Glibc Unicode CLDR sync, Desktop langpacks on installation, Input Method Automation, Fedora i18n test cases gap analysis and updates, Filipino language support, Transtats, IBus 1.6 plans and implementation, Update font packaging guidelines, Emoji enhancements, Random deps issue for font packages, and Testsuite for ibus-table.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/i18nfad17/FAD_7.JPG?raw=true" width="450" height="280"></p>

<p>Surprisingly, along with we had discussions around <code>Modularity</code> also. On third day of FAD - we had <code>Fedora 27 release party</code>. Cake cutting and round table discussions. Several folks joined us for the celebration.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/i18nfad17/F27_release_party.JPG?raw=true" width="450" height="280"></p>

<p>Last day, in the last hour we had series of demos, people showing their progress over two days of hacking. The second day evening we had FAD Game Night :)</p>

<h3>FAD Evening Activity</h3>

<p>We went to <a href="https://www.tripadvisor.in/LocationPhotoDirectLink-g297654-d4090582-i221160816-Amanora_Mall-Pune_Pune_District_Maharashtra.html">Amoeba</a> - Amanora Game Zone for bowling. Superb fun moment for all of us. Congrats to <code>Jens</code> and <code>Mike</code> for making a century on scoreboard. And then, we had a wonderful dinner at <a href="http://www.barbequenation.com/">Barbeque Nation</a>.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/i18nfad17/FAD_8.JPG?raw=true" width="450" height="280"></p>

<p>All thanks to <a href="https://getfedora.org/">Fedora</a> to care for their contributors that much! And bringing them together .. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flock 2017]]></title>
    <link href="http://sundeep.co.in/blog/2017/09/01/flock-2017/"/>
    <updated>2017-09-01T19:37:10+05:30</updated>
    <id>http://sundeep.co.in/blog/2017/09/01/flock-2017</id>
    <content type="html"><![CDATA[<p>&ldquo;Reporting time was 7:30pm and its 7:50, still your are saying it will take another 15 mins&rdquo; this was my words while I was waiting and talking with cab driver. I was travelling to US for the very first time, and was little excited. We covered the distance between Pune and Mumbai Airport in decent time and managed to reach there by 12:30 midnight. Our zone was E in the plane and it was Emirates. We reached Dubai early morning. I tried to capture <a href="https://en.wikipedia.org/wiki/Burj_Khalifa">Burj Khalifa</a>.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2017/IMG_2170.JPG?raw=true" width="450" height="280"></p>

<p>And then was starting of a long journey - Dubai to Boston. It was 5-6 movies long. Had great food and drinks. And a decent 3 hrs nap. All thanks to Emirates crew and services! We landed Boston 15 past 14 hrs, in the afternoon and waited for 25-30 mins at Bus stop to Hyannis, Cape Cod. Sun was about to sign-off for the day and street lights were yet to glow when we had great MacD burger, and headed towards <strong>The resort and conference center</strong> - flock'17 venue!</p>

<!--more-->


<h3>29th Aug &lsquo;17</h3>

<p><em>Brian Exelbierd</em> welcome and greet all of us. <em>Matthew Miller</em> took us on a tour, how fedora did in last few releases. Its state, community engagements and future plans. Everyone was enthusiastic about the sessions to come and the registration desk was really busy!</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2017/IMG_2196.JPG?raw=true" width="450" height="280"></p>

<p>Just after coffee break, speakers queued up and briefly advertised their sessions. And after lunch, we joined <em>Adam Williamson</em> on his talk <code>Packagers: working with automated test systems</code>.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2017/IMG_2205.JPG?raw=true" width="450" height="280"></p>

<p>The talk was around Python version checks, framework for automated tests execution: Taskotron, rpmdeplint which is a tool to find errors in RPM packages in the context of their dependency graph. Though rpmdeplint doesnot check &lsquo;reverse&rsquo; dependencies. Rpmgrill - utility to catch koji problems. And OpenQA tests. OpenQA are designed for operating-system level automated testing. Adam&rsquo;s talk was quite informative about different test frameworks actively being used in fedora. After this talk, we rushed to join <em>Josh Berkus</em> on his talk about <code>Become a container maintainer</code>.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2017/IMG_2206.JPG?raw=true" width="450" height="280"></p>

<p>He started his session with <a href="https://fedoraproject.org/wiki/Container:Guidelines">container guidelines</a>. Fixing Dockerfile for registry, labels and entry point. And briefly explained container <a href="https://fedoraproject.org/wiki/Container:Review_Process">review process</a>. This was a do session, and we had to write Dockerfile and review others. Many developers write Dockerfile for various apps but they hardly bother to submit it to fedora registry, this session filled this gap.</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2017/IMG_2207.JPG?raw=true" width="450" height="280"></p>

<p>In the evening we had game night and drinks. Many participated in swapping candies as well.</p>

<h3>30th Aug &lsquo;17</h3>

<p>A day of containers and atomic host talks. This track opened with <em>Dan Walsh</em>&rsquo;s talk on <code>New Container Technologies</code>. He covered System containers, Skopeo, Buildah, CRI-O, storage and images. A real deep-dive!</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2017/IMG_2216.JPG?raw=true" width="450" height="280"></p>

<p>Highlights of the talk include linux, containers should be open, openshift, standard container image format, push and pull, moving images between registries, execute container image: runc runtime, PGP signing of images, system containers, standalone containers (service specific), improved storage: read-only and read-write containers, in-prod containers should be immutable, shared file systems: run same images on multiple servers, instantaneous updates, building OCI image, buildah, APIs to manage containers, <a href="https://github.com/kubernetes-incubator/cri-o">CRI-O</a> effort: support multiple runtime and KPOD - mgmt tool for CRI-O. After this, we continued with <code>System Containers</code> and <code>Discussing Kubernetes &amp; Origin Deployment Options</code> talks. During lunch we stepped to parking area and made a few clicks!</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2017/IMG_2244.JPG?raw=true" width="450" height="280"></p>

<p>And then was the Atomic track. <em>Dusty Mabe</em> started the track with his talk <code>Atomic Host 101</code> and covered topics like Atomic Upgrades/Rollbacks, Browsing OS History, Package Layering, Live filesystem updates, Configuring Storage for Containers and Viewing Changes to your deployed files. This was also a <a href="https://dustymabe.com/2017/08/29/atomic-host-101-lab-part-0-preparation/">do session</a>. After this we had <code>Setup your own Atomic Workstation</code> and <code>Automate Building Custom Atomic Host with Ansible</code> talks. The evening ended in social gathering, playing games and tasty dinner all organised by flock.</p>

<h3>31st Aug &lsquo;17</h3>

<p>This is the day I was waiting for! <a href="https://fedoraproject.org/wiki/G11N">Globalization</a> track and my talk. Before lunch I was part of <code>Fedora Infrastructure: To infinity and Beyond</code> and <code>How do we restore Fedora to factory settings?</code> sessions. G11N track started with <em>Jens Petersen</em> and <em>Parag Nemade</em> talk about <code>Fedora i18n</code>. Where they covered some interesting topics like Langpacks auto-installation, libpinyin-2, Emoji, ibus, Glibc locales, Flatpak i18n, and others. Jens shared some ideas around Dynamic locale switching, Separation of translations (workflow and packaging) and Multilingual configuration (fallback, fonts).</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2017/IMG_2275.JPG?raw=true" width="450" height="280"></p>

<p>And here come <a href="https://www.youtube.com/watch?v=Ln9e3LM2Ht8">my talk</a> on <code>Introduction to Transtats</code>. Tool to track translation progress of packages across releases. You can find slides <a href="https://speakerdeck.com/sundeep/introduction-to-transtats">here</a>. This was followed by l10n talk by <em>Pravin Satpute</em>, <em>Alex Eng</em> and <em>Jean-Baptiste</em>. Alex demo&rsquo;d Jenkins-Zanata plugin. Jean makes us feel what processes are required to make fedora localization community a better place. Thank you Jean!</p>

<p><img class="center" src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/flock2017/IMG_2281.JPG?raw=true" width="450" height="280"></p>

<p>We had a long discussion and managed to figure-out action items towards the same. The team went for dinner together and I must say we had a great evening. And this called for conclusion of talks and do-sessions at flock 2017.</p>

<p>An incredible conference: <code>flock @hyannis</code> :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage Yourself]]></title>
    <link href="http://sundeep.co.in/blog/2017/05/24/manage-yourself/"/>
    <updated>2017-05-24T13:58:16+05:30</updated>
    <id>http://sundeep.co.in/blog/2017/05/24/manage-yourself</id>
    <content type="html"><![CDATA[<p>All throughout schooling we learn to work hard preparing for exams and celebrate the results! This induces tendency to set short term goals and put some efforts achieving it. Almost every one has some method to plan and execute what ever goals one has. For some goals rigorous efforts are required whereas some require small but continuous inputs. Overall if we find some balance where we keep our daily activities doing and in parallel meet goals requirements, that certainly would be awesome.</p>

<p>In another words, how about developing a tool which may keep us on track minimising random efforts and keep ourselves more focused towards some goals we have in mind for coming 2-3 yrs? <a href="http://makegoalsdaily.com/">make-goals-daily</a> is a small effort towards the same. This keeps a backlog (goals) and log our daily activities. In return it tries to calculate how much work is remaining for completion of goals. Also, it summaries tasks performed in a month grouped by goals. Thus making it personal activity logger to chase short term goals!!</p>

<p>Give it a try <code>$ docker pull suanand/makegoalsdaily</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transtats]]></title>
    <link href="http://sundeep.co.in/blog/2017/03/17/introduction-to-transtats/"/>
    <updated>2017-03-17T15:56:42+05:30</updated>
    <id>http://sundeep.co.in/blog/2017/03/17/introduction-to-transtats</id>
    <content type="html"><![CDATA[<p>From last few months, working on an idea. Globalization market is evolving and we have better translation platforms out in the market, some of them are closed source but some are open. In the whole process, success is defined when users identify some-software xyz-release is now available in so and so languages. The complexity increases when a project involves various packages. Is translation progress of all involved packages up-to-the-mark for the project&rsquo;s next release? <a href="http://transtats.org/">Transtats</a> is an answer to this!</p>

<p>Though it is just started and in very initial stage, one can use it for tracking translation progress. <strong>Transtats</strong> tries to create mapping between upstream project - translation platform and release streams. You may checkout <a href="http://docs.transtats.org/en/latest/">docs</a> for deeper insights. It has some inventory on which jobs operate, to create graphs. Lets see few steps how we get started using it.</p>

<!--more-->


<h4>Check Inventory</h4>

<p>Graphs will be generated for enabled languages, aliases are used while syncing. One can create a language set, which can be associated with a release branch. Multiple instances of a translation platform can be added. RHEL and Fedora are release streams whereas Fedora 26 is a branch. A release branch should have a language set and a schedule. Transtats jobs sync at intervals for keeping stats and schedule latest.</p>

<p style="text-align:center;"><img src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/transtats/inventory.png?raw=true" alt="inventory" /></p>

<h4>Add and Configure Packages</h4>

<p>While adding a package, upstream URL is required. And package name is verified with selected translation platform. Translation of a package can be tracked for multiple release streams. Package can be sync&rsquo;d while adding itself. Refreshing a package updates its details, translation stats and creates branch mapping. It maps Transtats release branches with most suitable project versions available at translation platform.</p>

<p style="text-align:center;"><img src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/transtats/package.png?raw=true" alt="package" /></p>

<h4>Add Graph Rule</h4>

<p>Slug form of rule name would be saved. This should be specific for a release branch. Packages having branch mapping created can only be included here. Either languages would be picked from associated language set with release branch or can be chosen. Somehow if a package is not tracked for a release stream and selected for inclusion Transtats would show an error.</p>

<p style="text-align:center;"><img src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/transtats/graphrule.png?raw=true" alt="graphrule" /></p>

<h4>Experience</h4>

<p>Transtats has two graph views: specific to a package in all languages for all branches and another specific to a release branch in chosen languages for selected packages. Latter is a graph rule representation and its accuracy depends on branch mapping of packages. A sync&rsquo;d package can appear in former view whereas branch mapping is necessary for latter.</p>

<p style="text-align:center;"><img src="https://github.com/sundeep-co-in/sundeep-co-in.github.io/blob/source/source/images/transtats/graph.png?raw=true" alt="graph" /></p>

<p>Transtats has reached <strong>0.1.0 release</strong>. If you like the idea and got something to share/contribute feel free to make it <a href="https://github.com/transtats">together</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PythonPune MeetUp - Oct '16]]></title>
    <link href="http://sundeep.co.in/blog/2016/10/22/pythonpune-meetup-oct-16/"/>
    <updated>2016-10-22T15:58:02+05:30</updated>
    <id>http://sundeep.co.in/blog/2016/10/22/pythonpune-meetup-oct-16</id>
    <content type="html"><![CDATA[<p>It has been long attending some talks - specially around <strong>Python</strong>!! And PythonPune looks perfect to meet some folks working with Python in the happening city - PUNE. If I remember correctly it was 6:30 I woke up and dropped text to my friend at Baner - <em>planning to spend latter half of the day at your place</em> - as venue was at GSLabs, Baner.</p>

<h3>Opening</h3>

<p>Chandan Kumar greeted everyone there and with some backgrounds/purpose of this meetup called for a round of introduction - <em>we had the strength of 50</em> - with some new faces. Nevertheless common goal was to <strong>learn new things</strong>. Akshay Goel started the talks with his discussions around <code>pyautogui</code> - an awesome module to automate keyboard/mouse events.</p>

<!--more-->


<p style="text-align:center;"><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/pypune2016/pypune_oct16_1.jpg" alt="opening" /></p>

<h3>My Talk</h3>

<p>And then came my turn. Again <a href="https://speakerdeck.com/sundeep/zanata-python-client">Zanata-Python-Client</a> but with more insights to why localization, what purpose Zanata solves and how to start contributing to python-client project. This includes <a href="https://youtu.be/LpyDF6u6DN8">walk-through</a> of interacting with Zanata using python-client. I think everyone enjoyed slides/demo. Got a few questions as well.</p>

<p style="text-align:center;"><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/pypune2016/pypune_oct16_2.jpg" alt="my talk" /></p>

<h3>Remainder</h3>

<p>This was followed by Narayan Behara, who demo&rsquo;d working of <code>Boto3 python library for AWS</code>. And Kiran Yallabandi presented his experiences on <code>decorators</code> - this was a deep dive. With some more topics the meetup concluded in an informative one, and I guess - everyone enjoyed sharing thoughts with morning tea/coffee.</p>

<p style="text-align:center;"><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/pypune2016/pypune_oct16_3.jpg" alt="closing" /></p>

<p>With hope to meet all in the next meetup, I headed friend&rsquo;s place - and had a great time there as well - indeed :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zanata-Python-Client v1.5.0]]></title>
    <link href="http://sundeep.co.in/blog/2016/04/20/zanata-python-client-v1-dot-5-0/"/>
    <updated>2016-04-20T10:25:08+05:30</updated>
    <id>http://sundeep.co.in/blog/2016/04/20/zanata-python-client-v1-dot-5-0</id>
    <content type="html"><![CDATA[<p>This release makes z-p-c little more stable with some major bugfixes. Feature wise we have <code>translation files mapping rules</code> added.</p>

<blockquote><p>Translation Files Mapping Rules</p></blockquote>

<p>Customize the way translation files are found when pushing, as well as the location they will be saved to when pulling.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- example rules definition in zanata.xml --&gt;
</span><span class='line'>&lt;rules&gt;
</span><span class='line'>  &lt;rule pattern="**/pot/*.pot"&gt;{locale}/{path}/{filename}.po&lt;/rule&gt;
</span><span class='line'>  &lt;rule pattern="**/po/*.pot"&gt;{path}/{locale_with_underscore}.po&lt;/rule&gt;
</span><span class='line'>&lt;/rules&gt;</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>In the example above, <code>pattern</code> identifies a source file, and the contents of the rule element specify how translation files will be stored.</p>

<p>The <code>pattern</code> attribute is a <strong>glob</strong> matching pattern to your source document file(s). You can define more than one rule and apply each rule to a specific set of source documents using different patterns. The first matched rule will be applied to the file.</p>

<p>Please note pattern value will be tested against file path relative to project root, not <code>src-dir</code>.</p>

<p><code>pattern</code> is optional. If not specified, the rule will be applied to all source documents in your project. The actual rule consists of literal path and placeholders/variables.</p>

<p>Supported placeholders/variables are:</p>

<ul>
<li><code>{path}</code> is the path between source document root (what you define as src-dir option) and the final file.</li>
<li><code>{filename}</code> the source document name without leading path and extension.</li>
<li><code>{locale}</code> the locale for the translation file. If you use &ldquo;map-from&rdquo; argument in your locale mapping, this will be the map-from value.</li>
<li><code>{locale_with_underscore}</code> same as above except all hyphens &lsquo;-&rsquo; will be replaced with underscores &lsquo;_&rsquo;. This is typically used in properties and gettext projects.</li>
<li><code>{extension}</code> the source document file extension</li>
</ul>


<p>For example, if you have the following file structure (where <code>{projectRoot}</code> is the root directory of your project and contains zanata.xml):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{projectRoot}/
</span><span class='line'>              templates/messages/kdeedu/kalzium.pot
</span><span class='line'>              templates/messages/kdeedu/artikulate.pot
</span><span class='line'>              de-DE/messages/kdeedu/kalzium.po
</span><span class='line'>              de-DE/messages/keeedu/artikulate.po
</span><span class='line'>              ...
</span><span class='line'>              zanata.xml</span></code></pre></td></tr></table></div></figure>


<p>Here we have two source documents (with <code>pot</code> extension) and two translation documents (with <code>po</code> extension) for the locale <code>de-DE</code>.</p>

<p>You can then use below configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;src-dir&gt;templates&lt;/src-dir&gt;
</span><span class='line'>&lt;trans-dir&gt;.&lt;/trans-dir&gt;
</span><span class='line'>&lt;rules&gt;
</span><span class='line'>    &lt;rule pattern="**/*.pot"&gt;{locale}/{path}/{filename}.po&lt;/rule&gt;
</span><span class='line'>&lt;/rules&gt;</span></code></pre></td></tr></table></div></figure>


<p>Explanation: Since you have defined <code>&lt;src-dir&gt;</code> as templates, the source document <code>templates/messages/kdeedu/kalzium.pot</code> will have its path extracted relative to <code>{projectRoot}/templates</code>, which gives the relative path <code>messages/kdeedu/kalzium.pot</code>. The relative path then will be partitioned into several tokens to form the following variables:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{path}                          = 'messages/kdeedu/'
</span><span class='line'>{filename}                      = 'kalzium'
</span><span class='line'>{locale}                        = 'de-DE'
</span><span class='line'>{locale_with_underscore}        = 'de_DE'
</span><span class='line'>{extension}                     = 'pot'</span></code></pre></td></tr></table></div></figure>


<p>NOTE the relative path <code>messages/kdeedu/kalzium.pot</code> will be the document&rsquo;s unique identifier inside Zanata. If you change src-dir setting later, e.g. to &ldquo;<strong>.</strong>&rdquo;, which results in a change of the relative path to <code>templates/messages/kdeedu/kalzium.pot</code>, pushing again will create a new document with the new path as its unique identifier, and the old document will be considered obsolete and will not be visible to anyone. The old document&rsquo;s translations will not be copied to the new document automatically, but they will appear as <strong>Translation Memory</strong> matches. This can be confusing and frustrating for translators.</p>

<p>As the rule is defined as <code>{locale}/{path}/{filename}.po</code>, for locale <code>de-DE</code>,</p>

<p>source file kalzium.pot&rsquo;s translation file will be written to or read from <code>{projectRoot}/de-DE/messages/kdeedu/kalzium.po</code>.
source file artikulate.pot&rsquo;s translation file will be written to or read from <code>{projectRoot}/de-DE/messages/kdeedu/artikulate.po</code></p>

<p>You can also replace <code>{locale}</code> with <code>{locale_with_underscore}</code> if you want all your locales to use underscore instead of hyphen. e.g. <strong>de-DE</strong> will become <strong>de_DE</strong> which results in translation files written to or read from <code>{projectRoot}/de_DE/messages/kdeedu/kalzium.po</code></p>

<p>The mapping rules configuration is optional in <code>zanata.xml</code>. If not specified, standard rules are applied according to your project type.</p>

<ul>
<li>gettext: <code>{path}/{locale_with_underscore}.po</code></li>
<li>podir: <code>{locale}/{path}/{filename}.po</code></li>
<li>properties: <code>{path}/{filename}_{locale_with_underscore}.{extension}</code></li>
<li>utf8properties: <code>{path}/{filename}_{locale_with_underscore}.{extension}</code></li>
<li>xliff: <code>{path}/{filename}_{locale_with_underscore}.{extension}</code></li>
<li>xml: <code>{path}/{filename}_{locale_with_underscore}.{extension}</code></li>
<li>file: <code>{locale}/{path}/{filename}.{extension}</code></li>
</ul>


<p>Feel free to give it a try and file bugs if you feel any.</p>

<p>Happing Translation!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FOSSASIA 2016]]></title>
    <link href="http://sundeep.co.in/blog/2016/03/28/fossasia-2016/"/>
    <updated>2016-03-28T18:20:17+05:30</updated>
    <id>http://sundeep.co.in/blog/2016/03/28/fossasia-2016</id>
    <content type="html"><![CDATA[<p><em>AI 380 Delhi to Singapore 5:30 AM</em> All were sleeping and cabin crew announces <code>we are about to land at Singapore Changi Airport in 15 minutes</code>. This thrills almost all passengers travelling to Singapore for the first time including me. Within seconds fog started appearing on windows and we landed smoothly. This took 10 mins getting from the arrival gate to immigration post. And after 20 mins or so I completed baggage claim and was heading Terminal 3 arrivals. Met with my colleagues there and by 10:15 AM we boarded MRT to <code>Red Hat Singapore Office</code>. In the evening explored <code>Bugis Street</code> and enjoyed food at <code>Little India</code> - this lead to end of 0th day.</p>

<!--more-->


<h4>Day 1</h4>

<p>Started at <code>Singapore Science Center</code> - wonders of science, technology, engineering and mathematics. At the opening ceremony hosted at The Marquee, Science Centre Singapore <em>Hong Phuc Dang</em> welcomed everyone in <a href="http://fossasia.org/">FOSSASIA</a> 2016. <em>Justin Lee</em> cheer the crowd and every one felt the enthusiasm being at Asia&rsquo;s premier open source event.</p>

<p style="text-align:center;"><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/fossasia2016/IMG_2850.JPG" alt="Welcome" /></p>

<p><em>Harish Pillay</em> the president of the Internet Society Singapore Chapter delivered keynote and spoke about phases of Free and Open Source Software. This took us through the journey! the revolution!!</p>

<p style="text-align:center;"><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/fossasia2016/IMG_2851.JPG" alt="Keynote" /></p>

<p>Tea and Coffee break gave us time to network and have refreshments. We went inside Science Center and experienced Interactive 360 × 360 degree Virtual Reality. At 12 noon we saw Tesla Electric Lightning Demonstration - amazing electric arcs from the Tesla Coil at 3500000 Volts - how it light up fluorescent light, explode the balloons and how people sit in cage without getting hurt when the electric touch the cage.</p>

<p style="text-align:center;"><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/fossasia2016/IMG_2853.JPG" alt="Snacks" /></p>

<p><em>Jan Nikolai Nelles</em> (Artist of &ldquo;The Other Nefertiti&rdquo;) spoke about #NefertitiHack and Cultural Commons. With regard to the notion of belonging and possession of material objects of other cultures, the Other Nefertiti is to make cultural objects publicly accessible and to promote a contemporary and critical approach on how the “Global North“ deals with heritage and the representation of “the Other”.</p>

<p style="text-align:center;"><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/fossasia2016/IMG_2854.JPG" alt="Nefertiti" /></p>

<p>Thereafter every one enjoyed lunch - chicken was tasty I must say. Here we had beginning of talks and workshops. I followed DevOps Track: oVirt Integrations, Comparing virtualization and containers, Globalizing your software, Containers and systemd. In the evening we rushed to <code>clarke quay</code></p>

<p style="text-align:center;"><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/fossasia2016/IMG_2867.JPG" alt="Clarke Quay" /></p>

<p>A wonderful day at Singapore full of knowledge, fun and enjoyment.</p>

<h4>Day 2</h4>

<p>We got up early, took MRT and reached Science Center. At 12 noon we had group photo - all faces (different geography) in a frame (common cause) is itself unique mark of participation and collaboration. Collected T-Shirt and had lunch. Time for the talk.</p>

<p style="text-align:center;"><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/fossasia2016/IMG_2860.JPG" alt="Clarke Quay" /></p>

<p>Covered introduction to Zanata Server, Push and Pull operations using Python Client and how to start contributing to Zanata Python Client project. Had some Q&amp;A also. In the evening we left with some time and went to <code>marina bay sands</code>.</p>

<p style="text-align:center;"><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/fossasia2016/IMG_3025.JPG" alt="Marina Bay Sands" /></p>

<p>Earned great learning and ideas to make talks better.</p>

<h4>Day 3</h4>

<p>Had healthy breakfast, took MRT and reached Science Center - the third and final day. This day I followed Privacy and Security track: Functionality, Security, Usability: Choose any two. Or GNOME, Not all security flaws are born equal and Privly - Share Privately. Today we had plans for Sentosa - The Fun Island.</p>

<p style="text-align:center;"><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/fossasia2016/IMG_2902.JPG" alt="Sentosa" /></p>

<p>It rocks!! SEA Aquarium, Universal Studio, Rides and many more make this place awesome tourist destination. We enjoyed <code>The Blue Band Group</code> performance which made our evening. Sentosa Express is a monorail line connecting this island.</p>

<p style="text-align:center;"><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/fossasia2016/IMG_3049.JPG" alt="Airport" /></p>

<p>And its time to depart. Had a great time, and with the hope to visit Singapore again some time, <em>boarded AI 381</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working With TMGMT Zanata]]></title>
    <link href="http://sundeep.co.in/blog/2016/02/25/working-with-tmgmt-zanata/"/>
    <updated>2016-02-25T11:53:55+05:30</updated>
    <id>http://sundeep.co.in/blog/2016/02/25/working-with-tmgmt-zanata</id>
    <content type="html"><![CDATA[<p>TMGMT Zanata is a plugin for Drupal&rsquo;s Translation Management Module TMGMT. The plugin allows TMGMT to send content to a configured Zanata project for translation, and can download translations as they are ready.</p>

<p>Zanata is a web-based system for translators, content creators and developers to manage localization projects.</p>

<ol>
<li>Installation</li>
<li>Set Up</li>
<li>Configuration</li>
<li>Translation Jobs</li>
</ol>


<!--more-->


<h2>Installation</h2>

<p>TMGMT Zanata requires the Translation Management Tool module (TMGMT) to be enabled. And to use Translation Management (Node Translation), the following modules must be installed:</p>

<ul>
<li>Entity API</li>
<li>Views</li>
<li>Chaos Tools (Required for Views)</li>
<li>Views Bulk Operations</li>
<li>Rules</li>
<li>Content Translation (enable only, part of core)</li>
<li>Locale (enable only, part of core)</li>
</ul>


<p>TMGMT also requires some other modules to be enabled:</p>

<ul>
<li>Translation Management UI</li>
<li>Content Source User Interface</li>
<li>Export / Import File</li>
</ul>


<p>This will automatically trigger the activation of Translation Management Core, Content Source and Translation Management Field modules.</p>

<p>TMGMT Zanata Installation is similar to any Drupal module.</p>

<p>Installed and enabled TMGMT with Zanata Plugin will look something similar to screenshot below:</p>

<p><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/tmgmt_zanata/1_tmgmt.png" alt="Drupal TMGMT Module" /></p>

<p>TMGMT Zanata plugin appears as <code>Zanata translator</code> and if enabled, can be used as one of the available translators to TMGMT module.</p>

<h2>Set Up</h2>

<h3>Enable translation for content types</h3>

<p>To make each content type translatable, the publishing options for the content type must be set appropriately. To do so:</p>

<ol>
<li>In the administration menu, navigate to &ldquo;Structure&rdquo; > &ldquo;Content types&rdquo;.</li>
<li>Find the content type you wish to make translatable and open its edit page.</li>
<li>Change to the &ldquo;Publishing options&rdquo; tab</li>
<li>Under &ldquo;Multilingual support, select "Enabled, with translation&rdquo;.</li>
<li>Click &ldquo;Save content type&rdquo;</li>
</ol>


<p><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/tmgmt_zanata/2_content_type.png" alt="Content Type" /></p>

<h3>Add languages</h3>

<p>To allow translation, your site must have one or more languages enabled, in addition to the default language. To enable a language:</p>

<ol>
<li>In the administration menu, navigate to &ldquo;Configuration&rdquo; > &ldquo;Regional and language&rdquo; > &ldquo;Languages&rdquo;.</li>
<li>Open the &ldquo;Add language&rdquo; page</li>
<li>Select an existing language or enter details for a custom language.</li>
<li>Click &ldquo;Add language&rdquo; or &ldquo;Add custom language&rdquo;</li>
</ol>


<p><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/tmgmt_zanata/3_languages.png" alt="Enable Languages" /></p>

<h3>Enable the TMGMT Zanata plugin module</h3>

<p>Once the code for the plugin module has been installed, enable the module. To do so, open &ldquo;Modules&rdquo; in the Administration menu, scroll to the &ldquo;Translation Management&rdquo; section, and ensure that &ldquo;Zanata translator&rdquo; is checked. Also ensure that TMGMT and its dependencies are checked. Click &ldquo;Save configuration&rdquo; to finalize the change.</p>

<h3>Cron</h3>

<p>Set up cron to automatically fetch new translations from Zanata server every time it runs.
There are two separate ways to run Drupal&rsquo;s cron tasks:</p>

<h4>Automated Cron</h4>

<p>The automated cron system is compatible with all systems because it doesn&rsquo;t actually involve the system&rsquo;s cron daemon. It works by checking at the end of each Drupal request to see when cron last ran and, if it has been too long, processing the cron tasks as part of that request. The two down-sides are
cron tasks will only run when Drupal is processing requests, and
the &lsquo;weight&rsquo; (processing and memory) of running the cron tasks will be added to some arbitrary unknown page request, which may slow down those requests, which may slow down those requests, and has the potential to exceed memory limits on a complex site.</p>

<p><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/tmgmt_zanata/4_cron.png" alt="Cron" /></p>

<h4>External Cron</h4>

<p>Create a cron job, or use some other external (to Drupal) method of triggering its cron tasks, such as an external cron job service like EasyCron or Cronless. This is the more reliable because it will always run on schedule. Note that if you create a cron job, you may want to disable the &ldquo;automated cron&rdquo; system entirely.</p>

<p>Easiest way to setup external cron it to add following in system crontab:</p>

<p><code>0 * * * * wget -O - -q -t 1 http://{your_drupal_server}/cron.php</code></p>

<p>This would run every hour. Replace {your_drupal_server} with the url of your server.</p>

<h2>Configuration</h2>

<p>Before the module can be used, it must be configured with some details about Zanata - user and project. These are set on the translator configuration page.</p>

<p>If you do not yet have a Zanata username or API key, or you have not yet created a project or project-version on Zanata for your website, use the following instructions to do so before you continue:</p>

<ul>
<li>To get a Zanata account, see Signing Up.</li>
<li>For instructions on finding your API key, see &ldquo;User Configuration&rdquo; on the Configure the Client help page.

<ul>
<li>User settings are accessed through the Dashboard.</li>
<li>Note that you do not need to create any config files for this plugin.</li>
</ul>
</li>
<li>For help creating a project, see Project Creation.</li>
<li>For help creating a version, see Version Creation.</li>
</ul>


<p>To open the translator configuration page and enter configuration:</p>

<ol>
<li>Open the Administration menu</li>
<li>Navigate to &ldquo;Configuration&rdquo; -> &ldquo;Regional and language&rdquo; -> &ldquo;Translation Management Translators&rdquo;</li>
<li>You will see a list of translator plugins that have been added to TMGMT. Look for &ldquo;Zanata translator&rdquo; in the list.</li>
<li>If you see an auto-created Zanata translator, open the configuration page by clicking &ldquo;edit&rdquo;.</li>
<li>If you do not see an auto-created Zanata translator, create one. To create a Zanata translator, click &ldquo;Add translator&rdquo;, enter an appropriate label such as &ldquo;Zanata translator&rdquo;, and in &ldquo;Translator plugin&rdquo; select &ldquo;Zanata translator&rdquo;. When you select &ldquo;Zanata translator&rdquo; its configuration page will be displayed below.</li>
<li>If you do not wish to perform translation review in Drupal, for example if review will be done in Zanata, ensure that &ldquo;Auto accept finished translations&rdquo; is checked. This setting can be changed later.</li>
<li>Ensure that the Zanata server URL shows the correct Zanata server on which you have an account and have created a project for your website. To find the full URL, open the Zanata server and click the Zanata logo to open the homepage. The URL shown in your browser address bar is the server URL, but do not include a / at the end. For example, the homepage for the main Zanata server is at &ldquo;<a href="http://translate.zanata.org/zanata/">http://translate.zanata.org/zanata/</a>&rdquo; so the URL for this server is &ldquo;<a href="http://translate.zanata.org/zanata">http://translate.zanata.org/zanata</a>&rdquo;.</li>
<li>Enter your username, your API key, your project ID and your project-version ID. Be careful to use your Zanata username rather than your display name, and the Project ID rather than the Project Name. See the links above for directions that may help to find this information.</li>
<li>Click &ldquo;Save translator&rdquo; to complete the configuration.</li>
<li>You are now able to create translation jobs that use Zanata translator.</li>
</ol>


<p><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/tmgmt_zanata/5_settings.png" alt="Plugin Configuration" /></p>

<p>Feature, <code>Translation Periodic Check</code> depends upon Cron setup and it fetches new translations from Zanata server every time cron runs.</p>

<h2>Translation Jobs</h2>

<p>TMGMT Zanata is a plugin for the Translation Management Tool (TMGMT), so most of the directions for creating and interacting with translation jobs can be taken directly from TMGMT&rsquo;s documentation. Let’s see translation of an article using TMGMT Zanata.</p>

<ul>
<li>In your website, navigate to article&rsquo;s page (you want to translate) and click on <code>Translate</code>. If <code>Translate</code> is not appearing please see configurations and complete the steps.</li>
</ul>


<p><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/tmgmt_zanata/6_page.png" alt="Page" /></p>

<ul>
<li>Clicking on <code>Translate</code> would take you to this page. Here, you can select language and request translation. Translation job would be created as soon as you request translation.</li>
</ul>


<p><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/tmgmt_zanata/7_select_lang.png" alt="Select Language" /></p>

<ul>
<li>Upon request, translation job would be added to cart. Here we can select translator for the added job and submit it. Job items and target language should be verified. As soon as we submit or checkout, page’s content would be pushed to server for translation.</li>
</ul>


<p><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/tmgmt_zanata/8_submit.png" alt="Submit Job" /></p>

<ul>
<li>After submission we receive confirmation which looks something like:</li>
</ul>


<p><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/tmgmt_zanata/9_confirmation.png" alt="Submit Confirmation" /></p>

<ul>
<li>In Zanata, we can navigate to the document uploaded.

<ul>
<li>As mentioned in Zanata Translator Plugin Settings, select Project and Version.</li>
<li>Select the language for which job is created.</li>
<li>Here, we can see list of documents uploaded for the given language.</li>
<li>Select the document which belongs to submitted job.

<ul>
<li>Please refer submission confirmation notes to identify document name, as it may differ than the article’s heading.</li>
</ul>
</li>
<li>This would take you to Zanata translation page. Here, you can translate the article.
Upon translation of content, mark complete to make them available for pull.</li>
</ul>
</li>
</ul>


<p><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/tmgmt_zanata/10_zanata.png" alt="Zanata" /></p>

<ul>
<li>If <code>Auto accept finished translations</code> and <code>Translation Periodic Check</code> are checked in translators settings, new translations delta are fetched every time cron runs and article will be published automatically once it reach 100% translated. We can fetch new translations and/or re-submit it to translator for active translation jobs.</li>
</ul>


<p><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/tmgmt_zanata/11_manage.png" alt="Manage Job" /></p>

<ul>
<li>Once translations are fetched from Zanata, it would be available for review. This step can be skipped by checking <code>Auto accept finished translations</code>. Accepted translations look like the screen below. Acceptance of translation makes a translation job finished.</li>
</ul>


<p><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/tmgmt_zanata/12_fetch.png" alt="Fetch Translation" /></p>

<ul>
<li>As soon as a translation job finishes, TMGMT publishes it and a navigation is added to the page which takes user to translated version of the article of intended language.</li>
</ul>


<p><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/tmgmt_zanata/13_publish.png" alt="Publish Translation" /></p>

<ul>
<li>Summary of translation jobs looks similar to below screen.</li>
</ul>


<p><img src="https://raw.githubusercontent.com/sundeep-co-in/sundeep-co-in.github.io/source/source/images/tmgmt_zanata/14_summary.png" alt="Job Summary" /></p>

<h3>References</h3>

<ul>
<li><a href="https://www.drupal.org/project/tmgmt_zanata">https://www.drupal.org/project/tmgmt_zanata</a></li>
<li><a href="https://www.drupal.org/node/1490024">https://www.drupal.org/node/1490024</a></li>
<li><a href="https://www.drupal.org/cron">https://www.drupal.org/cron</a></li>
<li><a href="https://www.drupal.org/node/1547632">https://www.drupal.org/node/1547632</a></li>
</ul>


<p>Happy Website Translation!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zanata-Python-Client v1.4.1]]></title>
    <link href="http://sundeep.co.in/blog/2016/01/14/zanata-python-client-v1-dot-4-1/"/>
    <updated>2016-01-14T16:15:14+05:30</updated>
    <id>http://sundeep.co.in/blog/2016/01/14/zanata-python-client-v1-dot-4-1</id>
    <content type="html"><![CDATA[<p>A new release - v1.4.1 is <strong>out</strong>. This brings feature which makes getting started with <strong>ZPC</strong> more fun. GitHub Release <a href="https://github.com/zanata/zanata-python-client/releases/tag/zpc-v1.4.1">Link</a></p>

<h2>What&rsquo;s New</h2>

<ul>
<li>commands - init, stats - enhances <strong>CLI</strong> experiences.</li>
<li>Some bug fixes - including critical issues.</li>
<li>Now the code is more robust, and better to understand.</li>
</ul>


<h2>Getting Started with Zanata and Python Client</h2>

<p>Starting out with translation project is a breeze with Zanata. Let&rsquo;s get started&hellip;</p>

<!--more-->


<blockquote><p>Server Side - User Settings</p></blockquote>

<p>Point your favorite browser to <a href="https://translate.zanata.org/zanata/"><code>https://translate.zanata.org/zanata/</code></a> and login (<em>signup for a new account</em>). You may find <a href="http://zanata-client.readthedocs.org/en/latest/configuration/#user-configuration">this</a> useful.</p>

<ul>
<li>Navigate to <code>Settings</code> and see for <code>Client</code>.</li>
<li>Generate a new <strong>API</strong> key, <em>ignore if it is already there</em>.</li>
<li>Look for user configuration contents for <code>zanata.ini</code>.</li>
</ul>


<p><em>Done! Let&rsquo;s move on&hellip;</em></p>

<blockquote><p>Client Side - CLI tasks</p></blockquote>

<p>Create a file <code>zanata.ini</code> at <code>$HOME/.config/</code> and copy the contents. Now, have <strong>ZPC</strong> in place.</p>

<ul>
<li>Download and Install</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wget https://github.com/zanata/zanata-python-client/archive/zpc-v1.4.1.zip
</span><span class='line'><span class="nv">$ </span>unzip zpc-v1.4.1.zip
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>zanata-python-client-zpc-v1.4.1
</span><span class='line'><span class="nv">$ </span>make install
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>By now, we should have zanata python client installed. Time to roll translation project.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zanata <span class="nb">help</span>
</span><span class='line'><span class="nv">$ </span>zanata &lt;<span class="nb">command</span>&gt; --help
</span></code></pre></td></tr></table></div></figure>


<p><em>Done! Let&rsquo;s move on&hellip;</em></p>

<blockquote><p>Initialize Project Configuration</p></blockquote>

<p>With <code>zanata init</code> it&rsquo;s much convenient to specify project details or create a new profile.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zanata init --user-config /path/to/zanata.ini
</span></code></pre></td></tr></table></div></figure>


<p>This takes you for an interaction about&hellip;</p>

<ul>
<li>Project&rsquo;s id, name, description (<em>option to create a brand new project</em>).</li>
<li>Project version (<em>option to create new version within project selected</em>).</li>
<li>Set project type {<code>gettext</code> or <code>podir</code>}</li>
<li>Set <code>translation template</code> and <code>translation target</code> directories.</li>
</ul>


<p>Aha, just <code>ls</code> your directory and you can see <code>zanata.xml</code> created. Now, language resources can be pushed.</p>

<p><em>Done! Let&rsquo;s move on&hellip;</em></p>

<blockquote><p>Get Documents Translated</p></blockquote>

<ul>
<li>Push all templates, translations (if flagged) onto server. Cool! translation activities can be started, now. Get translations back, may be to compile lang-packs.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zanata push --help
</span><span class='line'><span class="nv">$ </span>zanata push <span class="o">[</span>OPTIONS<span class="o">]</span>
</span><span class='line'><span class="nv">$ </span>zanata pull --help
</span><span class='line'><span class="nv">$ </span>zanata pull <span class="o">[</span>OPTIONS<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Tracking Translation Progress</h2>

<p>With this version translators can track translation progress for enabled <code>locales</code> for a <code>project-version</code>. Considering <code>zanata.ini</code> and <code>zanata.xml</code> in place, following commands will display stats.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zanata stats
</span><span class='line'><span class="nv">$ </span>zanata stats --help
</span><span class='line'><span class="nv">$ </span>zanata stats --details    <span class="c"># statistics for all docs in project version</span>
</span><span class='line'><span class="nv">$ </span>zanata stats --word       <span class="c"># include word level statistics as well</span>
</span><span class='line'><span class="nv">$ </span>zanata stats --docid      <span class="c"># statistics will be fetched for doc specified</span>
</span><span class='line'><span class="nv">$ </span>zanata stats --lang       <span class="c"># stats for specified locales will be fetched</span>
</span></code></pre></td></tr></table></div></figure>


<p>Happy Translation !!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zanata-Python-Client v1.4.0]]></title>
    <link href="http://sundeep.co.in/blog/2015/12/15/zanata-python-client-v1-dot-4-0/"/>
    <updated>2015-12-15T16:40:42+05:30</updated>
    <id>http://sundeep.co.in/blog/2015/12/15/zanata-python-client-v1-dot-4-0</id>
    <content type="html"><![CDATA[<p><strong>ZPC</strong> is a convenient way to communicate with Zanata server to push text for translation and pull translated text back for inclusion in software or documentation builds. This release brings fresh experiences to translators and contributors. GitHub Release <a href="https://github.com/zanata/zanata-python-client/releases/tag/v1.4.0">Link</a></p>

<h2>What&rsquo;s New</h2>

<ul>
<li>Use latest list of languages defined in the server for a project when using the client.</li>
<li>Should be able to specify minimum percentage of messages translated on pull.</li>
<li>Keep source and target dir paths in <code>zanata.xml</code></li>
<li>Code improvements for better maintainability.</li>
</ul>


<!--more-->


<h2>Translators</h2>

<p>I am sure, your search for translations platform, which can cater all your requirements, would come to an end, when you look at <a href="http://zanata.org">Zanata</a>, and if your project is already here - we have some new exciting features waiting for you to check them out. Let&rsquo;s get started&hellip;</p>

<blockquote><p>Preparation</p></blockquote>

<p>Keep your language resources ready (POT file/s or folder/s). Have <code>zanata.ini</code> in-place, details <a href="http://zanata-client.readthedocs.org/en/latest/configuration/#user-configuration">here</a>. Write your project configuration <code>zanata.xml</code> and keep it at root directory of your project, this helps ZPC to have some prior information of the project while talking to Zanata Server. Structure would be&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
</span><span class='line'>&lt;config xmlns="http://zanata.org/namespace/config/"&gt;
</span><span class='line'>        &lt;url&gt;ZANATA_SERVER_URL&lt;/url&gt;
</span><span class='line'>        &lt;project&gt;PROJECT_ID&lt;/project&gt;
</span><span class='line'>        &lt;project-version&gt;PROJECT_VERSION_ID&lt;/project-version&gt;
</span><span class='line'>        &lt;src-dir&gt;SOURCE_DIR&lt;/src-dir&gt;
</span><span class='line'>        &lt;trans-dir&gt;TRANS_DIR&lt;/trans-dir&gt;
</span><span class='line'>&lt;/config&gt;</span></code></pre></td></tr></table></div></figure>


<p><a href="http://zanata-client.readthedocs.org/en/latest/configuration/#project-version-configuration">This</a> may help you here.
<em>Done! Let&rsquo;s move on&hellip;</em></p>

<blockquote><p>Get ZPC Running</p></blockquote>

<ul>
<li>Download and Install</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wget https://github.com/zanata/zanata-python-client/archive/v1.4.0.zip
</span><span class='line'><span class="nv">$ </span>unzip v1.4.0.zip
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>zanata-python-client-1.4.0
</span><span class='line'><span class="nv">$ </span>make install
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Now, we should have ZPC installed. Help will guide us: how we can communicate. <code>list</code>, <code>project {create, info}</code>, <code>version {create, info}</code>, <code>push</code>, <code>pull</code> and <code>glossary push</code> are the commands we have. You may find <a href="https://github.com/zanata/zanata-python-client/wiki#use-cases">this</a> interesting.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zanata <span class="nb">help</span>
</span><span class='line'><span class="nv">$ </span>zanata &lt;<span class="nb">command</span>&gt; --help
</span></code></pre></td></tr></table></div></figure>


<p><em>Done! Let&rsquo;s move on&hellip;</em></p>

<blockquote><p>Push - Translate - Pull</p></blockquote>

<ul>
<li>Create project and version, can be done on server as well.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zanata project create <span class="o">{</span>project_id<span class="o">}</span> --project-name<span class="o">={</span>project_name<span class="o">}</span> --project-desc<span class="o">={</span>project_description<span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>zanata version create <span class="o">{</span>version_id<span class="o">}</span> --project-id<span class="o">={</span>project_id<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Push language resources to server: please check for user <code>zanata.ini</code> and project <code>zanata.xml</code> details. <em>Note</em>: Locale aliases need to be created and maintained at server and hence keeping locale_mapping in <code>zanata.xml</code> is deprecated. Mention project type {<code>podir</code> or <code>gettext</code>} in command line or in <code>zanata.xml</code>, and indicate the same in project settings at server.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zanata push --help
</span><span class='line'><span class="nv">$ </span>zanata push <span class="o">[</span>OPTIONS<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>This should push all templates, translations (if flagged) onto server. Cool! translation activities for the enabled languages can now, be started. Get translations back to compile lang-packs.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>zanata pull --help
</span><span class='line'><span class="nv">$ </span>zanata pull <span class="o">[</span>OPTIONS<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Aha, by now we should have translations done.</li>
</ul>


<h2>Contributors</h2>

<p>Hi! Zanata Python Client is purely written in Python. Pull Requests are always welcome. Travis checks for flake8 and tests. Just two steps {<code>code-review</code>, <code>QA</code>} to get it merged.</p>

<blockquote><p>Python-Zanata-Client Code Structure v1.4.0</p></blockquote>

<ul>
<li>Configuration (Remote, Local: zanata.ini, zanata.xml, command-line)

<ul>
<li><code>context.py</code>, <code>parseconfig.py</code></li>
</ul>
</li>
<li>Commands - Interface and their implementation

<ul>
<li><code>zanata.py</code>, <code>command.py</code>, <code>zanatacmd.py</code>, <code>cmdbase.py</code>, <code>pushcmd.py</code>, <code>pullcmd.py</code></li>
</ul>
</li>
<li>REST APIs - Commands Logic to REST Resource mapping

<ul>
<li><code>zanatalib/rest</code>, <code>resource.py</code>, <code>service.py</code>, <code>{doc,...}service.py</code></li>
</ul>
</li>
<li>Others: utilities, converters, parsers, logger, error

<ul>
<li><code>projectutils.py</code>, <code>csvconverter.py</code>, <code>parseconfig.py</code>, <code>logger.py</code>, <code>error.py</code></li>
</ul>
</li>
</ul>


<p>This helps us where to look into the code - required for adding feature and/or bug fix.</p>

<p>Happy Coding !!</p>
]]></content>
  </entry>
  
</feed>
